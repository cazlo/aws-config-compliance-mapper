name: Daily Update Check

on:
  schedule:
    - cron: '22 9 * * *' # UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-latest-config-rules:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.git-check.outputs.changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install uv
          uv sync
          # install browsers
          uv run playwright install 

      - name: Run script
        run: |
          uv run main.py
          git diff > git-diff.log

      - name: Upload output artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-config-rules
          path: |
            frontend/src/controls_by_config_rule.json
            frontend/src/version.json
            git-diff.log

      - name: Check for changes
        id: git-check
        run: |
            # git diff returns a non-zero exit code if differences are found.
            if git diff --quiet frontend/src/controls_by_config_rule.json; then
              echo "No changes detected."
              echo "changes=false" >> "$GITHUB_OUTPUT"
            else
              echo "Changes detected."
              echo "changes=true" >> "$GITHUB_OUTPUT"
            fi

      - name: Commit and push changes
        if: steps.git-check.outputs.changes == 'true'
        run: |
            # Configure git with a bot identity.
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # Stage all changes.
            git add frontend/src/controls_by_config_rule.json frontend/src/version.json
            
            # Commit the changes.
            git commit -m "Automated update from CI"
            
            # Push the commit to the main branch.
            git push origin main
            # note this will not trigger the `deploy.yml` CI workflow

  build:
    needs: check-latest-config-rules
    runs-on: ubuntu-latest
    if: needs.git-check.outputs.changes == 'true'
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Download latest config rules
        uses: actions/download-artifact@v4
        with:
          name: latest-config-rules

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build
        working-directory: ./frontend
        run: npm run build

      - name: Upload static files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  deploy:
    # Add a dependency to the build job
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4